dplyr::summarise(mean = mean(critical_spacing_deg),sd = sd(critical_spacing_deg), sem = sd(critical_spacing_deg)/sqrt(length(critical_spacing_deg)))
#wilcoxon rank sum test
wilcox.test(critical_spacing_deg~eccentricity_deg,data=visual_crowding)
### Data Preparation
myfiles = list.files(path = "../data/pilotB-raw" , pattern= "*.csv", full.names=TRUE)
df = ldply(myfiles, read_csv)
filtered_df <-
df  %>%
drop_na(participantID) %>%
filter(correctRate > 0.0)
visual_crowding <- subset(filtered_df, select= c(participantID, eccentricity_deg, critical_spacing_deg, crowding_session, correctRate))
visual_crowding
distance_df <-
df  %>%
filter(grepl("end_trial", trialType))
viewing_distance_df <- subset(distance_df, select= c(participantID,viewDistance_1, viewDistance_2, viewDistance_3 ))
viewing_distance_df
viewing_distance_reshape_df <- reshape(data= viewing_distance_df, idvar="participantID",
varying = c("viewDistance_1", "viewDistance_2", "viewDistance_3"),
v.name=c("viewDistance"),direction="long", times = c(1,2,3))
viewing_distance_reshape_df
#Mean, SD, Standard error of the mean (sem)
visual_crowding_by <- visual_crowding %>%
dplyr::group_by(eccentricity_deg) %>%
dplyr::summarise(mean = mean(critical_spacing_deg),sd = sd(critical_spacing_deg), sem = sd(critical_spacing_deg)/sqrt(length(critical_spacing_deg)))
#wilcoxon rank sum test
wilcox.test(critical_spacing_deg~eccentricity_deg,data=visual_crowding)
cr_bars <- aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
cr_stderr <- visual_crowding %>%
dplyr::group_by(eccentricity_deg) %>%
dplyr::summarise(sem = sd(critical_spacing_deg)/sqrt(length(critical_spacing_deg)))
cr_bars <- merge(cr_bars, cr_stderr, by=c('eccentricity_deg'))
ggplot(data=cr_bars, aes(x=as.factor(eccentricity_deg), y=critical_spacing_deg)) +
geom_bar(stat="identity", position=position_dodge())  +
geom_errorbar(aes(ymin=critical_spacing_deg-sem, ymax=critical_spacing_deg+sem), width=.1, position=position_dodge()) +
labs(x = "Eccentricity (deg)", y = "Visual Crowding (deg)") +
theme(axis.text=element_text(size=14, color='black'), axis.title=element_text(size=15), legend.text=element_text(size=10))
visual_crowding_accuracy <- aggregate(correctRate~participantID, data = visual_crowding, mean)
#histgram of participant accuracy
ggplot(visual_crowding_accuracy, aes(x=correctRate)) + geom_histogram(aes(y=..density..), binwidth = 0.02, alpha=.8) +
geom_vline(aes(xintercept=mean(correctRate)), color="red", size=1) +
geom_density(alpha=.2, fill="grey") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 5)) +
labs(title="", x="Percentage Correctness", y="Density") +
theme_grey(base_size = 15)
#summary: mean, min, max
summary(visual_crowding_accuracy$correctRate)
#data summary
viewing_distance_mean <- aggregate(viewDistance~participantID, data = viewing_distance_reshape_df, mean)
summary(viewing_distance_reshape_df$viewDistance) #mean, min, max
sd(viewing_distance_mean$viewDistance) # SD = 8.9
ggplot(viewing_distance_mean, aes(x=viewDistance)) + geom_histogram(aes(y=..density..), binwidth = 2, alpha=.8) +
geom_vline(aes(xintercept=mean(viewDistance)), color="red", size=1) +
geom_density(alpha=.2, fill="grey") +
labs(title="", x="Calculated Viewing Distance (cm)", y="Density") +
theme_grey(base_size = 15)
viewing_distance_sd <- aggregate(viewDistance~participantID, data = viewing_distance_reshape_df, sd)
mean(viewing_distance_sd$viewDistance) #mean
min(viewing_distance_sd$viewDistance) #min
max(viewing_distance_sd$viewDistance) #max
#draw Fig. 7d
ggplot(viewing_distance_sd, aes(x=viewDistance)) + geom_histogram(aes(y=..density..), binwidth = 0.5, alpha=.8) +
geom_vline(aes(xintercept=mean(viewDistance)), color="red", size=1) +
geom_density(alpha=.2, fill="grey") +
labs(title="", x="SD of Calculated Viewing Distance (cm)", y="Density")+
theme_grey(base_size = 15)
#transfer the df from long to wide
viewing_distance_wide <- spread(viewing_distance_reshape_df, time, viewDistance)
names(viewing_distance_wide)[2:4] <- c('s1','s2','s3')
#calculate ICC
ICC(viewing_distance_wide[,c(2,3,4)],missing=TRUE,alpha=.05)
#draw Fig. 7e
ggpairs(viewing_distance_wide, columns = 2:4, upper = list(continuous = wrap("cor", size=7, color='black'))) +
theme(axis.text = element_text(size = 10))
### Data Preparation
myfiles = list.files(path = "../data/pilotB-protected" , pattern= "*.csv", full.names=TRUE)
df = ldply(myfiles, read_csv)
filtered_df <-
df  %>%
drop_na(participantID) %>%
filter(correctRate > 0.0)
### Data Preparation
myfiles = list.files(path = "../data/pilotB-protected" , pattern= "*.csv", full.names=TRUE)
df = ldply(myfiles, read_csv)
filtered_df <-
df  %>%
drop_na(participantID) %>%
filter(correctRate > 0.0)
### Data Preparation
myfiles = list.files(path = "../data/pilotB-protected" , pattern= "*.csv", full.names=TRUE)
df = ldply(myfiles, read_csv)
filtered_df <-
df  %>%
drop_na(participantID) %>%
filter(correctRate > 0.0)
visual_crowding <- subset(filtered_df, select= c(participantID, eccentricity_deg, critical_spacing_deg, crowding_session, correctRate))
visual_crowding
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(psych)
library(tidyr)
library(ggplot2)
library(GGally)
library(lmerTest)
library(readr)
library(psych)
library(tidyr)
library(ggplot2)
library(GGally)
library(lmerTest)
#sem: calculate standard error from the mean
sem <- function(x) sd(x)/sqrt(length(x))
#conversion between radian and degree
rad2deg <- function(rad) {(rad * 180) / (pi)}
deg2rad <- function(deg) {(deg * pi) / (180)}
visual_crowding = read_csv('../data/7ab_visual_crowding.csv')
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
#wilcoxon rank sum test
wilcox.test(critical_spacing_deg~eccentricity_deg,data=visual_crowding)
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, count)
#Mean
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
#wilcoxon rank sum test
wilcox.test(critical_spacing_deg~eccentricity_deg,data=visual_crowding)
#stats for Fig. 7a
aggregate(critical_spacing_deg~eccentricity_deg+dyslexia, data = visual_crowding_dyslexia, mean)
visual_crowding_dyslexia <- read_csv('../data/tab2_visual_crowding_dyslexia.csv')
#stats for Fig. 7a
aggregate(critical_spacing_deg~eccentricity_deg+dyslexia, data = visual_crowding_dyslexia, mean)
visual_crowding_dyslexia <- read_csv('../data/tab2_visual_crowding_dyslexia.csv')
#stats for Fig. 7a
aggregate(critical_spacing_deg~eccentricity_deg+dyslexia, data = visual_crowding_dyslexia, mean, count)
visual_crowding_dyslexia <- read_csv('../data/tab2_visual_crowding_dyslexia.csv')
#stats for Fig. 7a
aggregate(critical_spacing_deg~eccentricity_deg+dyslexia, data = visual_crowding_dyslexia, count)
visual_crowding_dyslexia <- read_csv('../data/tab2_visual_crowding_dyslexia.csv')
#stats for Fig. 7a
aggregate(critical_spacing_deg~eccentricity_deg+dyslexia, data = visual_crowding_dyslexia, mean)
aggregate(critical_spacing_deg~eccentricity_deg+dyslexia, data = visual_crowding_dyslexia, sum)
aggregate(critical_spacing_deg~eccentricity_deg+dyslexia, data = visual_crowding_dyslexia, sum)
count(visual_crowding_dyslexia, ccentricity_deg, dyslexia)
library(readr)
library(psych)
library(tidyr)
library(ggplot2)
library(GGally)
library(lmerTest)
library(dplyr)
aggregate(critical_spacing_deg~eccentricity_deg+dyslexia, data = visual_crowding_dyslexia, sum)
count(visual_crowding_dyslexia, ccentricity_deg, dyslexia)
aggregate(critical_spacing_deg~eccentricity_deg+dyslexia, data = visual_crowding_dyslexia, sum)
count(visual_crowding_dyslexia, eccentricity_deg, dyslexia)
#### Load Relevant Libraries and Functions
library(data.table)
library(readr)
library(printr)
library(readr)
library(psych)
library(tidyr)
library(ggplot2)
library(GGally)
library(lmerTest)
library(dplyr)
library(plyr)
library(stringr)
### Data Preparation
myfiles = list.files(path = "../data/final-protected" , pattern= "*.csv", full.names=TRUE)
df = ldply(myfiles, read_csv)
filtered_df <-
df  %>%
drop_na(participantID) %>%
filter(correctRate > 0.0)
visual_crowding <- subset(filtered_df, select= c(participantID, eccentricity_deg, critical_spacing_deg, crowding_session, correctRate))
visual_crowding
#### Load Relevant Libraries and Functions
library(data.table)
library(readr)
library(printr)
library(readr)
library(psych)
library(tidyr)
library(ggplot2)
library(GGally)
library(lmerTest)
library(dplyr)
library(plyr)
library(stringr)
### Data Preparation
myfiles = list.files(path = "../data/final-protected" , pattern= "*.csv", full.names=TRUE)
df = ldply(myfiles, read_csv)
filtered_df <-
df  %>%
drop_na(participantID) %>%
filter(correctRate > 0.0)
visual_crowding <- subset(filtered_df, select= c(participantID, eccentricity_deg, critical_spacing_deg, crowding_session, correctRate))
visual_crowding
distance_df <-
df  %>%
filter(grepl("end_trial", trialType))
viewing_distance_df <- subset(distance_df, select= c(participantID,viewDistance_1, viewDistance_2, viewDistance_3 ))
viewing_distance_df
viewing_distance_reshape_df <- reshape(data= viewing_distance_df, idvar="participantID",
varying = c("viewDistance_1", "viewDistance_2", "viewDistance_3"),
v.name=c("viewDistance"),direction="long", times = c(1,2,3))
viewing_distance_reshape_df
#Mean, SD, Standard error of the mean (sem)
visual_crowding_by <- visual_crowding %>%
dplyr::group_by(eccentricity_deg) %>%
dplyr::summarise(mean = mean(critical_spacing_deg),sd = sd(critical_spacing_deg), sem = sd(critical_spacing_deg)/sqrt(length(critical_spacing_deg)))
#wilcoxon rank sum test
wilcox.test(critical_spacing_deg~eccentricity_deg,data=visual_crowding)
#remove the participant entry which was automatically adjusted to a lower eccentricity_deg (neither 4 or 6)
visual_crowding_revised <-
visual_crowding  %>%
filter(eccentricity_deg > 3.85)
visual_crowding_revised
#remove the participant entry which was automatically adjusted to a lower eccentricity_deg (neither 4 or 6)
visual_crowding_revised <-
visual_crowding  %>%
filter(eccentricity_deg >= 4.00)
visual_crowding_revised
visual_crowding <- visual_crowding_revised
distance_df <-
df  %>%
filter(grepl("end_trial", trialType))
viewing_distance_df <- subset(distance_df, select= c(participantID,viewDistance_1, viewDistance_2, viewDistance_3 ))
viewing_distance_df
viewing_distance_reshape_df <- reshape(data= viewing_distance_df, idvar="participantID",
varying = c("viewDistance_1", "viewDistance_2", "viewDistance_3"),
v.name=c("viewDistance"),direction="long", times = c(1,2,3))
viewing_distance_reshape_df
#Mean, SD, Standard error of the mean (sem)
visual_crowding_by <- visual_crowding %>%
dplyr::group_by(eccentricity_deg) %>%
dplyr::summarise(mean = mean(critical_spacing_deg),sd = sd(critical_spacing_deg), sem = sd(critical_spacing_deg)/sqrt(length(critical_spacing_deg)))
#wilcoxon rank sum test
wilcox.test(critical_spacing_deg~eccentricity_deg,data=visual_crowding)
cr_bars <- aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
cr_stderr <- visual_crowding %>%
dplyr::group_by(eccentricity_deg) %>%
dplyr::summarise(sem = sd(critical_spacing_deg)/sqrt(length(critical_spacing_deg)))
cr_bars <- merge(cr_bars, cr_stderr, by=c('eccentricity_deg'))
ggplot(data=cr_bars, aes(x=as.factor(eccentricity_deg), y=critical_spacing_deg)) +
geom_bar(stat="identity", position=position_dodge())  +
geom_errorbar(aes(ymin=critical_spacing_deg-sem, ymax=critical_spacing_deg+sem), width=.1, position=position_dodge()) +
labs(x = "Eccentricity (deg)", y = "Visual Crowding (deg)") +
theme(axis.text=element_text(size=14, color='black'), axis.title=element_text(size=15), legend.text=element_text(size=10))
visual_crowding_accuracy <- aggregate(correctRate~participantID, data = visual_crowding, mean)
#histgram of participant accuracy
ggplot(visual_crowding_accuracy, aes(x=correctRate)) + geom_histogram(aes(y=..density..), binwidth = 0.02, alpha=.8) +
geom_vline(aes(xintercept=mean(correctRate)), color="red", size=1) +
geom_density(alpha=.2, fill="grey") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 5)) +
labs(title="", x="Percentage Correctness", y="Density") +
theme_grey(base_size = 15)
#summary: mean, min, max
summary(visual_crowding_accuracy$correctRate)
#data summary
viewing_distance_mean <- aggregate(viewDistance~participantID, data = viewing_distance_reshape_df, mean)
summary(viewing_distance_reshape_df$viewDistance) #mean, min, max
sd(viewing_distance_mean$viewDistance) # SD = 8.9
ggplot(viewing_distance_mean, aes(x=viewDistance)) + geom_histogram(aes(y=..density..), binwidth = 2, alpha=.8) +
geom_vline(aes(xintercept=mean(viewDistance)), color="red", size=1) +
geom_density(alpha=.2, fill="grey") +
labs(title="", x="Calculated Viewing Distance (cm)", y="Density") +
theme_grey(base_size = 15)
viewing_distance_sd <- aggregate(viewDistance~participantID, data = viewing_distance_reshape_df, sd)
mean(viewing_distance_sd$viewDistance) #mean
min(viewing_distance_sd$viewDistance) #min
max(viewing_distance_sd$viewDistance) #max
#draw Fig. 7d
ggplot(viewing_distance_sd, aes(x=viewDistance)) + geom_histogram(aes(y=..density..), binwidth = 0.5, alpha=.8) +
geom_vline(aes(xintercept=mean(viewDistance)), color="red", size=1) +
geom_density(alpha=.2, fill="grey") +
labs(title="", x="SD of Calculated Viewing Distance (cm)", y="Density")+
theme_grey(base_size = 15)
#transfer the df from long to wide
viewing_distance_wide <- spread(viewing_distance_reshape_df, time, viewDistance)
names(viewing_distance_wide)[2:4] <- c('s1','s2','s3')
#calculate ICC
ICC(viewing_distance_wide[,c(2,3,4)],missing=TRUE,alpha=.05)
#draw Fig. 7e
ggpairs(viewing_distance_wide, columns = 2:4, upper = list(continuous = wrap("cor", size=7, color='black'))) +
theme(axis.text = element_text(size = 10))
ggplot(data=cr_bars, aes(x=as.factor(eccentricity_deg), y=critical_spacing_deg)) +
geom_bar(stat="identity", position=position_dodge(), width = 1)  +
geom_errorbar(aes(ymin=critical_spacing_deg-sem, ymax=critical_spacing_deg+sem), width=.1, position=position_dodge()) +
labs(x = "Eccentricity (deg)", y = "Visual Crowding (deg)") +
theme(axis.text=element_text(size=14, color='black'), axis.title=element_text(size=15), legend.text=element_text(size=10))
ggplot(data=cr_bars, aes(x=as.factor(eccentricity_deg), y=critical_spacing_deg)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.5)  +
geom_errorbar(aes(ymin=critical_spacing_deg-sem, ymax=critical_spacing_deg+sem), width=.1, position=position_dodge()) +
labs(x = "Eccentricity (deg)", y = "Visual Crowding (deg)") +
theme(axis.text=element_text(size=14, color='black'), axis.title=element_text(size=15), legend.text=element_text(size=10))
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sum)
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
count(visual_crowding, eccentricity_deg, dyslexia)
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
count(visual_crowding, eccentricity_deg)
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
count(visual_crowding~eccentricity_deg)
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
summarise(visual_crowding~eccentricity_deg)
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
summarise(visual_crowding, eccentricity_deg)
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
count(visual_crowding, eccentricity_deg, )
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
count(visual_crowding, eccentricity_deg,time)
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
count(visual_crowding, eccentricity_deg,time)
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
count(visual_crowding, crowding_session,time)
visual_crowding %>% group_by(eccentricity_deg) %>% tally()
ggplot(data=cr_bars, aes(x=as.factor(eccentricity_deg), y=critical_spacing_deg)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.5, color = blue)  +
geom_errorbar(aes(ymin=critical_spacing_deg-sem, ymax=critical_spacing_deg+sem), width=.1, position=position_dodge()) +
labs(x = "Eccentricity (deg)", y = "Visual Crowding (deg)") +
theme(axis.text=element_text(size=14, color='black'), axis.title=element_text(size=15), legend.text=element_text(size=10))
ggplot(data=cr_bars, aes(x=as.factor(eccentricity_deg), y=critical_spacing_deg)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.5, fill = "blue")  +
geom_errorbar(aes(ymin=critical_spacing_deg-sem, ymax=critical_spacing_deg+sem), width=.1, position=position_dodge()) +
labs(x = "Eccentricity (deg)", y = "Visual Crowding (deg)") +
theme(axis.text=element_text(size=14, color='black'), axis.title=element_text(size=15), legend.text=element_text(size=10))
ggplot(data=cr_bars, aes(x=as.factor(eccentricity_deg), y=critical_spacing_deg)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.25, fill = "blue")  +
geom_errorbar(aes(ymin=critical_spacing_deg-sem, ymax=critical_spacing_deg+sem), width=.1, position=position_dodge()) +
labs(x = "Eccentricity (deg)", y = "Visual Crowding (deg)") +
theme(axis.text=element_text(size=14, color='black'), axis.title=element_text(size=15), legend.text=element_text(size=10))
ggplot(data=cr_bars, aes(x=as.factor(eccentricity_deg), y=critical_spacing_deg)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.25, fill = "blue")  +
scale_y_continuous(breaks=c(0,1,2,3)) +
geom_errorbar(aes(ymin=critical_spacing_deg-sem, ymax=critical_spacing_deg+sem), width=.1, position=position_dodge()) +
labs(x = "Eccentricity (deg)", y = "Visual Crowding (deg)") +
theme(axis.text=element_text(size=14, color='black'), axis.title=element_text(size=15), legend.text=element_text(size=10))
ggplot(data=cr_bars, aes(x=as.factor(eccentricity_deg), y=critical_spacing_deg)) +  #position=position_dodge(),
geom_bar(stat="identity", width = 0.25, fill = "blue")  +
scale_y_continuous(breaks=c(0,1,2,3)) +
geom_errorbar(aes(ymin=critical_spacing_deg-sem, ymax=critical_spacing_deg+sem), width=.1, position=position_dodge()) +
labs(x = "Eccentricity (deg)", y = "Visual Crowding (deg)") +
theme(axis.text=element_text(size=14, color='black'), axis.title=element_text(size=15), legend.text=element_text(size=10))
ggplot(data=cr_bars, aes(x=as.factor(eccentricity_deg), y=critical_spacing_deg)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.25, fill = "blue")  +
scale_y(breaks=c(0,1,2,3)) +
geom_errorbar(aes(ymin=critical_spacing_deg-sem, ymax=critical_spacing_deg+sem), width=.1, position=position_dodge()) +
labs(x = "Eccentricity (deg)", y = "Visual Crowding (deg)") +
theme(axis.text=element_text(size=14, color='black'), axis.title=element_text(size=15), legend.text=element_text(size=10))
ggplot(data=cr_bars, aes(x=as.factor(eccentricity_deg), y=critical_spacing_deg)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.25, fill = "blue")  +
geom_errorbar(aes(ymin=critical_spacing_deg-sem, ymax=critical_spacing_deg+sem), width=.1, position=position_dodge()) +
labs(x = "Eccentricity (deg)", y = "Visual Crowding (deg)") +
theme(axis.text=element_text(size=14, color='black'), axis.title=element_text(size=15), legend.text=element_text(size=10))
knitr::opts_chunk$set(echo = TRUE)
View(visual_crowdin)
View(visual_crowding)
View(visual_crowding_dyslexia)
## two-sample
power.welch.t.test(delta = 0.961, sd1 = 0.592, sd2 = 1.163, power = 0.8)
#### Load Relevant Libraries and Functions
library(data.table)
library(readr)
library(printr)
library(readr)
library(psych)
library(tidyr)
library(ggplot2)
library(GGally)
library(lmerTest)
library(dplyr)
library(plyr)
library(stringr)
library(ggpubr)
#### Load Relevant Libraries and Functions
library(data.table)
library(readr)
library(printr)
library(readr)
library(psych)
library(tidyr)
library(ggplot2)
library(GGally)
library(lmerTest)
library(dplyr)
library(plyr)
library(stringr)
library(rstatix)
# Save the data in two different vector
eccen4 <- visual_crowding %>%
filter(eccentricity_deg == 4.0) %>%
pull(critical_spacing_deg)
eccen6 <- visual_crowding %>%
filter(eccentricity_deg == 6.0) %>%
pull(critical_spacing_deg)
# Compute t-test
res <- t.test(eccen4, eccen6)
res
visual_crowding%>% cohens_d(critical_spacing_deg ~ eccentricity_deg , var.equal = FALSE)
```{r}
visual_crowding%>% cohens_d(critical_spacing_deg ~ eccentricity_deg , var.equal = FALSE)
#Mean
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
#wilcoxon rank sum test
wilcox.test(critical_spacing_deg~eccentricity_deg,data=visual_crowding)
visual_crowding = read_csv('../data/7ab_visual_crowding.csv')
View(visual_crowding_dyslexia)
#Mean
#Mean
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, mean)
#SD
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sd)
#Standard error of the mean (sem)
aggregate(critical_spacing_deg~eccentricity_deg, data = visual_crowding, sem)
#wilcoxon rank sum test
wilcox.test(critical_spacing_deg~eccentricity_deg,data=visual_crowding)
visual_crowding%>% cohens_d(critical_spacing_deg ~ eccentricity_deg , var.equal = FALSE)
visual_crowding_dyslexia
current_visual_crowding <- visual_crowding_dyslexia %>%
filter(dyslexia == 0)
current_visual_crowding <- visual_crowding_dyslexia %>%
filter(dyslexia == 0)
current_visual_crowding%>% cohens_d(critical_spacing_deg ~ eccentricity_deg , var.equal = FALSE)
#wilcoxon rank sum test
wilcox.test(critical_spacing_deg~eccentricity_deg,data=current_visual_crowding)
eccen4 <- current_visual_crowding %>%
filter(eccentricity_deg == 4.0) %>%
pull(critical_spacing_deg)
eccen6 <- current_visual_crowding %>%
filter(eccentricity_deg == 6.0) %>%
pull(critical_spacing_deg)
# Compute t-test
res <- t.test(eccen4, eccen6)
res
